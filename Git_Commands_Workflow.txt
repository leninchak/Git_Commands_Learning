Git & Github: ||
--------------||
--------------||


First, repo is created in Github and then cloned it to local repository further work in local repo:
--------------------------------------------------------------------------------------------------

=>	Install Git for Windows

=>	setup SSH on both local machine and Github\
		ssh-keygen -t rsa -b 4096 -C "lrat@protonmail.com"		{Git Bash}

=>	Create a repository on Github.

=>	Modify git global configuration file
		git config --global user.email "lrat@protonmail.com"		{Git Bash}
		git config --global user.name "leninchakr"			{Git Bash}

=>	Create separate directory in local machine to download and work with remote repository

=>	clone a remote repository to local machine using ssh-link.
		git clone ssh_link						{Git Bash}
	
=>	Edit (using Vim editor) or add new files in the local repository
		vim file_name							{Git Bash}
	
=>	Any new file addition or modification on existing file must be stated for commit
		git add .							{Git Bash}
	
=>	After stating all modifie/added files, commit the changes to local repository
		git commit -m "message" -m "discription"			{Git Bash}

=>	Now push the changes to remote/Github repository
		git push origin master						{Git Bash}
			{origin - master/main branch in github. master - local branch, which need to be merged with origin branch}
				eg:	git push origin local_machine_branch

	Work_Flow:	{First, repo is created in Github and then clone it to local repository and then start to work further}
	----------

		git config --global
			|
		git clone ssh_link
			|
		vim file_name
			|
		git add .
			|
		git commit -m "message for changes" -m "discription for the changes"
			|
		git push origin master/main
			|
		make pull request {if local repo user is not authorized to changes in admin's repo}
		
============================================================================================================================

First, Create a local Repo and Then set it up in Github:
-------------------------------------------------------

=>	Create a folder that will act as local repository

=>	Convert this folder into github repository
		git init
		
=>	Create a new repository with same name as created locally

=>	Copy SSH_link from Github and set it as origin for remote
		git 

=>	Verify the remote referece of the Github repo
		git remote -v
		

	Work_Flow:	{First, Create a local Repo and Then set it up in Github and work further in local repo}
	----------
	
		Create a folder with suitable repo name
			|
		git init
			|
		Create a new repo in remote
			|
		Tell local git where to referece during remote push
			|
		git remote add origin SSH_link_new_repo_in_Github
			|
		git remote -v

=============================
For staging & commiting a "modified" {not created} files, run the following commands
git commit -am "Message"

=============================

============================================================================================================================

Branches - Concepts:
--------------------

=>	How to find list of branches for a repository & on which branch I am currently on (*)?
		git branch		{note the star: Current working branch}
		
=>	Create new branch from "main" branch in local machine
		git checkout -b new_branch_name
		
=>	Create new branch from "another feature branch"
		git checkout -b new_branch_name feature_branch
		
=>	Switching between branches
		git checkout name_of_branch_to_switch_to
		
=>	Create a branch in local machine and push it to remote	{first create a branch locally, then push to remote}
		git checkout -b Local_branch_name
		git push origin Local_branch_name
		
=>	Delete remote branch from local machine, then delete it in local machine too
		git push origin --delete Branch_Name_In_Remote
		git branch -d Branch_Name_In_Remote
		
=>	Deleting a branch in local machine
		git branch -d branch_name
		
===========================================================================================================================

Assume a file is edited in main branch.
Then, Creating a branch & working on same file name will have different content.

To merge "any edition" in different branch to main branch,
	Method 1:
		git checkout feature_branch			{stay in feature_branch}
		git merge main						{feature' content is merged with main's branch}
		git push origin main				{Then push main's branch content to 'origin'}
	
	Method 2:
		go to featur branch
			git checkout Feature_Branch
		
		Then push this whole 'Feature_Branch' to GitHub
			git push --set-upstream origin Feature_Branch		{a new branch with all changes will be created on remote GitHub}
				{System will respond how to create a PULL REQUEST + Copy & Paste the link + Work further in GitHub Page}
				
===========================================================================================================================
For new line charecter to be effect, give TWO SPACE CHARACTER at the end of each line

===========================================================================================================================
whenever we want to commit the changes, ALWAYS go to "distination" branch
===========================================================================================================================
{Owner of GitHub Repo & Local machine Repo are same {Like admin rights}}

Merge Conflict:		Ref:	https://www.youtube.com/watch?v=nDRWhKc5Yd4

=>	Assume there is a master/main branch of a repository, on which two developers will work with locally, on GitHub
		Create a Repo in GitHub
	
=>	Both developers pulled the master/main branch from GitHub
		git pull origin main	{Developer_1}
		git pull origin main	{Developer_2}
	
=>	Assume Developer_1 finished the work first and pushed the local repo to Github.
		"Done all work locally"	{Developer_1}
		git push origin main

=>	Assume Developer_2 created a feature_branch from local main branch.
		git checkout -b Feature_Branch	{Developer_2}	{A relation between Main_Branch & Feature_Branch is created!}
		
	=>	Here, he modified the file and did commit.
			vim File_Name
			git status
			git add .
			git commit -m "D"
			git status			{check it has clean Working Tree!, before MERGING }
			
		=>	He want to merge the modification done on feature_branch to local main branch then wanted to push the modified local main repo.
				git checkout main		{ALWAYS go to "distination" branch}
			
			=>	Here main has TWO options
					1.	Directly merging Feature_Branch with Local Main_Branch
							
					2.	Make another PULL from GitHub to get updated files, Then merge Feature_Branch with updated Main_Branch, Then Again PUSH merged files to GitHub.
							git pull origin main		{Main_Branch Files will be updated, SO the relation between Main_Branch & Feature_Branch is DESTROYED!}
							git status					{Everything should be OK}
							git merge Feature_Branch	{If there is any changes on same lines, a conflict will rise!}	{Check CLI carefully "main|MERGING" will be displayed (insted of "main")if there is conflict}
							
							vim File_Name				{Resolve the conflict Manually!}
							git status
							git add File_Name			{All conflicts will be fixed here. & Add to stage again}
							git commit -m "Message" -m "Description"	{Now conflicts RESOLVED and procceed to MERGE by "Commit" command. AND "main|MERGING" will changed to "main"}
							
							git merge Feature_Branch	{Try again Local merging, If it is successful, it will show up-to-date message}
							git status					{Make a FINAL status checkup}
							
							git push origin main		{OR trt this command too. "git push --set-upstream origin main}
							Make PULL REQUEST if needed from above command

=>	NOTE:	No editing/modification is done on any file, while we in "Main_Branch".	Always take a copy of Main_Branch to another Feature_Branch and do all work!!. It is always good practice to NOT Edit directly on Main_Branch	{All work is done LOCALLY}
==================================================================================================================================

PUSHING Proceduere:
-------------------

If executing PUSH without executing ADD and COMMIT, the modification done on the file will not be reflected in GitHub.

So always follow the order,

	Order:		STATUS	->	ADD, COMMIT, if required	->	PULL	->	STATUS	->	VIM/MERGE	->	RESOLVE CONFLICT, if any in VIM	->	STATUS	->	ADD	->	COMMIT	->	STATUS	->	PUSH {To Remote}!
==================================================================================================================================
{Owner of GitHub Repo & Local machine Repo are same {Like admin rights}}

Single developer + Editing Same file on Different Branches Locally + Merging (BY resolving conflict) fea to main_branch + Pushing to Remote:
--------------------------------------------------------------------------------------------------------------------------------------------

=>	Pull a repo from GitHub to local repo
		git pull origin main

=>	create a feature_branch of the local's main repo
		git checkout -b feature_branch

=>	Edit file in local main_branch	+	Status	+	Add 	+	Commit
		git checkout main
		vim File_Name		{Editing}
		git status
		git add .
		git commit -m "M"
		git status			{Everything must be clean}
		
=>	Edit file in feature_branch		+	Status	+	Add		+	Commit
		git checkout feature_branch
		vim File_Name
		git status
		git add .
		git commit -m "M"
		git status			{Everything must be clean}
			
			=>	Now LINK is broken between Local's main_branch and Local's Feature_Branch

=>	Go to distination branch {main_branch} & Start merging:
		git checkout main
		git merge feature_branch	{If there is modification on same line on both breanches, Conflict will rise { "(main|MERGING)" will be created instead of "main"	}
		Follow the "PUSHING Proceduere"!!!
==================================================================================================================================

